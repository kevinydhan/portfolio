// React modules
import React from 'react'
import PropTypes from 'prop-types'
import ProjectCard from './ProjectCard'
import { useStaticQuery, graphql } from 'gatsby'

// Styling modules
import styled from 'styled-components'

// Misc. modules
import content from '@content/projects.yml'
import { generateKey } from '@utils'

// =============================================================================

const ProjectList = (props) => {
    const { observeElement } = props
    /**
     * Possible values:
     * - srcWebp
     * - src
     */
    const endAttr = 'srcWebp'

    const data = useStaticQuery(
        graphql`
            query loadProjectMockups {
                allImageSharp {
                    edges {
                        node {
                            fluid(maxWidth: 696, quality: 100) {
                                originalName
                                srcWebp
                            }
                        }
                    }
                }
            }
        `
    )

    /**
     * Creates a hash map where each key is the image file name and the value
     * is an object containing the `src` and `originalName` properties of
     * the image.
     */
    const imageHashMap = data.allImageSharp.edges.reduce((hashMap, edge) => {
        const imageDetails = edge.node.fluid
        if (hashMap[imageDetails.originalName]) {
            // Do something with duplicate entries
        } else {
            hashMap[imageDetails.originalName] = { ...imageDetails }
        }
        return hashMap
    }, {})

    /**
     * Updates the `imgSrc` property of each project object literal to the
     * `src` value generated by Gatsby.
     */
    const projects = content.projects.map((project) => ({
        ...project,
        imgSrc: imageHashMap[project.imgSrc]
            ? imageHashMap[project.imgSrc][endAttr]
            : imageHashMap['project-mockup-sample.png'][endAttr],
    }))

    return (
        <List>
            {projects.map((project, i) => {
                return (
                    <ProjectCard
                        key={generateKey(project.name, i)}
                        observeElement={observeElement}
                        {...project}
                    />
                )
            })}
        </List>
    )
}

ProjectList.propTypes = { observeElement: PropTypes.func.isRequired }

// =============================================================================

const List = styled('ul')`
    margin-top: 60px;

    @media only screen and (min-width: 768px) {
        margin-top: 90px;
    }

    @media only screen and (min-width: 1024px) {
        margin-top: 100px;
    }

    @media only screen and (min-width: 1440px) {
        margin-top: 130px;
    }
`

// =============================================================================

export default ProjectList
